
from aiogram import Router, F, types
from aiogram.types import InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext

from db.database import add_user, add_reminder

from keyboards import kbs
from states.state_add import AddMemory

call_router = Router()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –¥–æ–±–∞–≤–∏–≤ —Ñ–æ—Ç–æ
@call_router.callback_query(F.data == 'back')
async def back(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    text_message = (
        f'–ü—Ä–∏–≤–µ—Ç, <b>{callback.from_user.first_name}</b>!\n\n–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥'
        '\n\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫'
        '\n/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏'
    )
    photo = InputMediaPhoto(
        media=FSInputFile('data\\cat.jpg'), 
        caption=text_message)
    await callback.message.edit_media(media=photo, reply_markup=kbs.menu)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@call_router.callback_query(lambda c: c.data.startswith('time_'), AddMemory.waiting_for_time)
async def process_time(callback: types.CallbackQuery, state: FSMContext) -> None:

    time_digits = callback.data.replace('time_', '').zfill(4)
    time_formatted = f"{time_digits[:2]}:{time_digits[2:]}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(time=time_formatted)
    
    await callback.message.edit_text(
        f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫:\n\n'
        f'<blockquote>{(await state.get_data())["text_to_save"]}</blockquote>\n'
        f'üïê –í—Ä–µ–º—è: {time_formatted}',
        reply_markup=kbs.complete
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–¥
@call_router.callback_query(F.data == 'complete', AddMemory.waiting_for_time)
async def complete_note(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    
    try:
        await add_user(
            user_id=callback.from_user.id,
            first_name=callback.from_user.first_name
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        await add_reminder(
            user_id=callback.from_user.id,
            text=data['text_to_save'],
            remind_at=data['time']
        )
        
        await callback.message.edit_text('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        
    except Exception as e:
        await callback.message.edit_text(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n{str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /add'
        )
    
    finally:
        await state.clear()