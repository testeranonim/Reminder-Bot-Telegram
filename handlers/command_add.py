
import re
from datetime import datetime
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from db.database import add_reminder, add_user

add_router = Router()

from datetime import datetime
import re

@add_router.message(Command('add'))
async def add_with_datetime(message: Message):
    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /add —Ç–µ–∫—Å—Ç –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /add –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ 2025-07-15 13:00")
    
    input_text = parts[1]
    
    # –ò—â–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (—Ä–∞–∑—Ä–µ—à–∞–µ–º 1-2 —Ü–∏—Ñ—Ä—ã –¥–ª—è —á–∞—Å–æ–≤)
    match = re.search(r'(\d{4}-\d{2}-\d{2}) (\d{1,2}:\d{2})$', input_text)
    if not match:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    date_str = match.group(1)
    time_str = match.group(2)
    reminder_text = input_text[:match.start()].strip()
    
    if not reminder_text:
        return await message.reply("‚ùå –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è (–¥–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        if len(time_str.split(':')[0]) == 1:
            time_str = f"0{time_str}"  # "9:00" ‚Üí "09:00"
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É
        remind_at = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        remind_at_str = remind_at.strftime("%Y-%m-%d %H:%M:%S")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if remind_at <= datetime.now():
            return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await add_user(
            user_id=message.from_user.id,
            first_name=message.from_user.first_name
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await add_reminder(
            user_id=message.from_user.id,
            text=reminder_text,
            remind_at=remind_at_str
        )
        
        await message.reply(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {reminder_text}\n"
            f"‚è∞ –ö–æ–≥–¥–∞: {remind_at.strftime('%d.%m.%Y –≤ %H:%M')}"
        )
    
    except ValueError as e:
        error_detail = str(e)
        if "time data" in error_detail:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:00 –∏–ª–∏ 23:59)")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ: {error_detail}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")